cat << CTAG
{
    name:MODS,
		elements:[
			{ SPane:{
				title:"USB Keyboard Controller"
			}},
					{ SDescription:{
						description:"Use your Android phone as USB keyboard for your PC. Disconnect the USB cable, tap the enable button, connect the USB cable again and open the <a href='https://play.google.com/store/apps/details?id=remote.hid.keyboard.client'>USB Keyboard</a> app. After you are done with it, disconnect the USB cable and the tap disable button. WARNING: This hack might give you a random reboot when you get back to the usual mode on enforcing SELinux."
					}},
					{ SButton:{
						label:"Enable",
						action:"usb_keyboard enable"
					}},
					{ SButton:{
						label:"Disable",
						action:"usb_keyboard disable"
					}},
			`if [ -f "/sys/class/misc/batterylifeextender/charging_limit" ]; then
				BLX=\`$BB cat /sys/class/misc/batterylifeextender/charging_limit\`
				$BB echo '{ SPane:{
					title:"Battery Life Extender (BLX)"
				}},
					{ SSeekBar:{
						description:"Limit the capacity to which the battery will be charged.",
						unit:"%",
						step:1,
						min:0,
						max:100,
						default:'$BLX',
						action:"generic /sys/class/misc/batterylifeextender/charging_limit"
					}},'
			fi`
			{ SPane:{
				title:"Network"
			}},
				{ SGeneric:{
					title:"Device HostName",
					default:`getprop net.hostname 2> /dev/null`,
					action:"buildprop net.hostname",
				}},
				{ SGeneric:{
					title:"ADB Wireless Port",
					default:`getprop service.adb.tcp.port`,
					action:"buildprop service.adb.tcp.port",
				}},
			`if [ -d "/sys/class/leds" ]; then
				$BB echo '{ SPane:{
					title:"LED Control",
					description:"Kernel trigger for LEDs. Using this might interfere with OS level LED management and vice versa.",
				}},'
				if [ -f "/sys/class/leds/blue/trigger" ]; then
					$BB echo '{ SOptionList:{
						title:"Blue",
						default:none,
						action:"bracket-option /sys/class/leds/blue/trigger",
						values:['
							for LEDS in \`$BB cat /sys/class/leds/blue/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
								$BB echo "\"$LEDS\",";
							done;
						$BB echo ']
					}},'
				fi
				if [ -f "/sys/class/leds/green/trigger" ]; then
					$BB echo '{ SOptionList:{
						title:"Green",
						default:none,
						action:"bracket-option /sys/class/leds/green/trigger",
						values:['
							for LEDS in \`$BB cat /sys/class/leds/green/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
								$BB echo "\"$LEDS\",";
							done;
						$BB echo ']
					}},'
				fi
				if [ -f "/sys/class/leds/red/trigger" ]; then
					$BB echo '{ SOptionList:{
						title:"Red",
						default:none,
						action:"bracket-option /sys/class/leds/red/trigger",
						values:['
							for LEDS in \`$BB cat /sys/class/leds/red/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
								$BB echo "\"$LEDS\",";
							done;
						$BB echo ']
					}},'
				fi
				if [ -f "/sys/class/leds/lcd-backlight/trigger" ]; then
					$BB echo '{ SOptionList:{
						title:"LCD Backlight",
						default:none,
						action:"bracket-option /sys/class/leds/lcd-backlight/trigger",
						values:['
							for LEDS in \`$BB cat /sys/class/leds/lcd-backlight/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
								$BB echo "\"$LEDS\",";
							done;
						$BB echo ']
					}},'
				fi
				if [ -f "/sys/class/leds/spotlight/trigger" ]; then
					$BB echo '{ SOptionList:{
						title:"Spotlight",
						default:none,
						action:"bracket-option /sys/class/leds/spotlight/trigger",
						values:['
							for LEDS in \`$BB cat /sys/class/leds/spotlight/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
								$BB echo "\"$LEDS\",";
							done;
						$BB echo ']
					}},'
				fi
			fi`
		]
}
CTAG
